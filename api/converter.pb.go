// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: converter.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported Formats
type Format int32

const (
	Format_UNSPECIFIED_FORMAT     Format = 0
	Format_ASCIIDOC               Format = 1
	Format_BEAMER                 Format = 2
	Format_BIBTEX                 Format = 3
	Format_BIBLATEX               Format = 4
	Format_COMMONMARK             Format = 5
	Format_COMMONMARK_X           Format = 6
	Format_CONTEXT                Format = 7
	Format_CSLJSON                Format = 8
	Format_DOCBOOK_4              Format = 9
	Format_DOCBOOK_5              Format = 10
	Format_DOCX                   Format = 11
	Format_DOKUWIKI               Format = 12
	Format_EPUB_3                 Format = 13
	Format_EPUB_2                 Format = 14
	Format_FB2                    Format = 15
	Format_GFM                    Format = 16
	Format_HADDOCK                Format = 17
	Format_HTML_5                 Format = 18
	Format_HTML_4                 Format = 19
	Format_ICML                   Format = 20
	Format_IPYNB                  Format = 21
	Format_JATS_ARCHIVING         Format = 22
	Format_JATS_ARTICLE_AUTHORING Format = 23
	Format_JATS_PUBLISHING        Format = 24
	Format_JIRA                   Format = 25
	Format_JSON                   Format = 26
	Format_LATEX                  Format = 27
	Format_MAN                    Format = 28
	Format_MARKDOWN               Format = 29
	Format_MARKDOWN_MMD           Format = 30
	Format_MARKDOWN_PHP_EXTRA     Format = 31
	Format_MARKDOWN_STRICT        Format = 32
	Format_MEDIAWIKI              Format = 33
	Format_MS                     Format = 34
	Format_MUSE                   Format = 35
	Format_NATIVE                 Format = 36
	Format_ODT                    Format = 37
	Format_OPML                   Format = 38
	Format_OPENDOCUMENT           Format = 39
	Format_ORG                    Format = 40
	Format_PDF                    Format = 41
	Format_PLAIN                  Format = 42
	Format_PPTX                   Format = 43
	Format_RST                    Format = 44
	Format_RTF                    Format = 45
	Format_TEXINFO                Format = 46
	Format_TEXTILE                Format = 47
	Format_SLIDEOUS               Format = 48
	Format_SLIDY                  Format = 49
	Format_DZSLIDES               Format = 50
	Format_REVEALJS               Format = 51
	Format_S5                     Format = 52
	Format_TEI                    Format = 53
	Format_XWIKI                  Format = 54
	Format_ZIMWIKI                Format = 55
)

// Enum value maps for Format.
var (
	Format_name = map[int32]string{
		0:  "UNSPECIFIED_FORMAT",
		1:  "ASCIIDOC",
		2:  "BEAMER",
		3:  "BIBTEX",
		4:  "BIBLATEX",
		5:  "COMMONMARK",
		6:  "COMMONMARK_X",
		7:  "CONTEXT",
		8:  "CSLJSON",
		9:  "DOCBOOK_4",
		10: "DOCBOOK_5",
		11: "DOCX",
		12: "DOKUWIKI",
		13: "EPUB_3",
		14: "EPUB_2",
		15: "FB2",
		16: "GFM",
		17: "HADDOCK",
		18: "HTML_5",
		19: "HTML_4",
		20: "ICML",
		21: "IPYNB",
		22: "JATS_ARCHIVING",
		23: "JATS_ARTICLE_AUTHORING",
		24: "JATS_PUBLISHING",
		25: "JIRA",
		26: "JSON",
		27: "LATEX",
		28: "MAN",
		29: "MARKDOWN",
		30: "MARKDOWN_MMD",
		31: "MARKDOWN_PHP_EXTRA",
		32: "MARKDOWN_STRICT",
		33: "MEDIAWIKI",
		34: "MS",
		35: "MUSE",
		36: "NATIVE",
		37: "ODT",
		38: "OPML",
		39: "OPENDOCUMENT",
		40: "ORG",
		41: "PDF",
		42: "PLAIN",
		43: "PPTX",
		44: "RST",
		45: "RTF",
		46: "TEXINFO",
		47: "TEXTILE",
		48: "SLIDEOUS",
		49: "SLIDY",
		50: "DZSLIDES",
		51: "REVEALJS",
		52: "S5",
		53: "TEI",
		54: "XWIKI",
		55: "ZIMWIKI",
	}
	Format_value = map[string]int32{
		"UNSPECIFIED_FORMAT":     0,
		"ASCIIDOC":               1,
		"BEAMER":                 2,
		"BIBTEX":                 3,
		"BIBLATEX":               4,
		"COMMONMARK":             5,
		"COMMONMARK_X":           6,
		"CONTEXT":                7,
		"CSLJSON":                8,
		"DOCBOOK_4":              9,
		"DOCBOOK_5":              10,
		"DOCX":                   11,
		"DOKUWIKI":               12,
		"EPUB_3":                 13,
		"EPUB_2":                 14,
		"FB2":                    15,
		"GFM":                    16,
		"HADDOCK":                17,
		"HTML_5":                 18,
		"HTML_4":                 19,
		"ICML":                   20,
		"IPYNB":                  21,
		"JATS_ARCHIVING":         22,
		"JATS_ARTICLE_AUTHORING": 23,
		"JATS_PUBLISHING":        24,
		"JIRA":                   25,
		"JSON":                   26,
		"LATEX":                  27,
		"MAN":                    28,
		"MARKDOWN":               29,
		"MARKDOWN_MMD":           30,
		"MARKDOWN_PHP_EXTRA":     31,
		"MARKDOWN_STRICT":        32,
		"MEDIAWIKI":              33,
		"MS":                     34,
		"MUSE":                   35,
		"NATIVE":                 36,
		"ODT":                    37,
		"OPML":                   38,
		"OPENDOCUMENT":           39,
		"ORG":                    40,
		"PDF":                    41,
		"PLAIN":                  42,
		"PPTX":                   43,
		"RST":                    44,
		"RTF":                    45,
		"TEXINFO":                46,
		"TEXTILE":                47,
		"SLIDEOUS":               48,
		"SLIDY":                  49,
		"DZSLIDES":               50,
		"REVEALJS":               51,
		"S5":                     52,
		"TEI":                    53,
		"XWIKI":                  54,
		"ZIMWIKI":                55,
	}
)

func (x Format) Enum() *Format {
	p := new(Format)
	*p = x
	return p
}

func (x Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Format) Descriptor() protoreflect.EnumDescriptor {
	return file_converter_proto_enumTypes[0].Descriptor()
}

func (Format) Type() protoreflect.EnumType {
	return &file_converter_proto_enumTypes[0]
}

func (x Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Format.Descriptor instead.
func (Format) EnumDescriptor() ([]byte, []int) {
	return file_converter_proto_rawDescGZIP(), []int{0}
}

// Request for a Convert call.
type ConvertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input type
	FromFormat Format `protobuf:"varint,1,opt,name=from_format,json=fromFormat,proto3,enum=pandoc.Format" json:"from_format,omitempty"`
	// The requested output type
	ToFormat Format `protobuf:"varint,2,opt,name=to_format,json=toFormat,proto3,enum=pandoc.Format" json:"to_format,omitempty"`
	// The input content
	Content []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ConvertRequest) Reset() {
	*x = ConvertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_converter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertRequest) ProtoMessage() {}

func (x *ConvertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_converter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertRequest.ProtoReflect.Descriptor instead.
func (*ConvertRequest) Descriptor() ([]byte, []int) {
	return file_converter_proto_rawDescGZIP(), []int{0}
}

func (x *ConvertRequest) GetFromFormat() Format {
	if x != nil {
		return x.FromFormat
	}
	return Format_UNSPECIFIED_FORMAT
}

func (x *ConvertRequest) GetToFormat() Format {
	if x != nil {
		return x.ToFormat
	}
	return Format_UNSPECIFIED_FORMAT
}

func (x *ConvertRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// Response to a Convert call.
type ConvertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The output type
	ToFormat Format `protobuf:"varint,1,opt,name=to_format,json=toFormat,proto3,enum=pandoc.Format" json:"to_format,omitempty"`
	// The output content
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ConvertResponse) Reset() {
	*x = ConvertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_converter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertResponse) ProtoMessage() {}

func (x *ConvertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_converter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertResponse.ProtoReflect.Descriptor instead.
func (*ConvertResponse) Descriptor() ([]byte, []int) {
	return file_converter_proto_rawDescGZIP(), []int{1}
}

func (x *ConvertResponse) GetToFormat() Format {
	if x != nil {
		return x.ToFormat
	}
	return Format_UNSPECIFIED_FORMAT
}

func (x *ConvertResponse) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_converter_proto protoreflect.FileDescriptor

var file_converter_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x70, 0x61, 0x6e, 0x64, 0x6f, 0x63, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x6e, 0x64, 0x6f, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2b, 0x0a,
	0x09, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x70, 0x61, 0x6e, 0x64, 0x6f, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x08, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x6e,
	0x64, 0x6f, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x08, 0x74, 0x6f, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2a, 0xe7,
	0x05, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x44, 0x4f, 0x43, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x45, 0x41, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42,
	0x49, 0x42, 0x54, 0x45, 0x58, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x42, 0x4c, 0x41,
	0x54, 0x45, 0x58, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x4d,
	0x41, 0x52, 0x4b, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x4d,
	0x41, 0x52, 0x4b, 0x5f, 0x58, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x53, 0x4c, 0x4a, 0x53, 0x4f, 0x4e, 0x10,
	0x08, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x43, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x34, 0x10, 0x09,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x43, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x35, 0x10, 0x0a, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x4f, 0x43, 0x58, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x4b,
	0x55, 0x57, 0x49, 0x4b, 0x49, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x50, 0x55, 0x42, 0x5f,
	0x33, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x50, 0x55, 0x42, 0x5f, 0x32, 0x10, 0x0e, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x42, 0x32, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x46, 0x4d, 0x10,
	0x10, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x44, 0x44, 0x4f, 0x43, 0x4b, 0x10, 0x11, 0x12, 0x0a,
	0x0a, 0x06, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x35, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x54,
	0x4d, 0x4c, 0x5f, 0x34, 0x10, 0x13, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4d, 0x4c, 0x10, 0x14,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x50, 0x59, 0x4e, 0x42, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x4a,
	0x41, 0x54, 0x53, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x12,
	0x1a, 0x0a, 0x16, 0x4a, 0x41, 0x54, 0x53, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x4a,
	0x41, 0x54, 0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x18,
	0x12, 0x08, 0x0a, 0x04, 0x4a, 0x49, 0x52, 0x41, 0x10, 0x19, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53,
	0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x54, 0x45, 0x58, 0x10, 0x1b, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x41, 0x4e, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x52, 0x4b,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x1d, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x4d, 0x4d, 0x44, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x52, 0x4b,
	0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x48, 0x50, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x10, 0x1f,
	0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x57, 0x49,
	0x4b, 0x49, 0x10, 0x21, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x53, 0x10, 0x22, 0x12, 0x08, 0x0a, 0x04,
	0x4d, 0x55, 0x53, 0x45, 0x10, 0x23, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x24, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x44, 0x54, 0x10, 0x25, 0x12, 0x08, 0x0a, 0x04, 0x4f,
	0x50, 0x4d, 0x4c, 0x10, 0x26, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x4e, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x27, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x52, 0x47, 0x10, 0x28,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x44, 0x46, 0x10, 0x29, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41,
	0x49, 0x4e, 0x10, 0x2a, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x50, 0x54, 0x58, 0x10, 0x2b, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x53, 0x54, 0x10, 0x2c, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x54, 0x46, 0x10, 0x2d,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x58, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x2e, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x45, 0x58, 0x54, 0x49, 0x4c, 0x45, 0x10, 0x2f, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4c,
	0x49, 0x44, 0x45, 0x4f, 0x55, 0x53, 0x10, 0x30, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x49, 0x44,
	0x59, 0x10, 0x31, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x5a, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x53, 0x10,
	0x32, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x45, 0x41, 0x4c, 0x4a, 0x53, 0x10, 0x33, 0x12,
	0x06, 0x0a, 0x02, 0x53, 0x35, 0x10, 0x34, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x45, 0x49, 0x10, 0x35,
	0x12, 0x09, 0x0a, 0x05, 0x58, 0x57, 0x49, 0x4b, 0x49, 0x10, 0x36, 0x12, 0x0b, 0x0a, 0x07, 0x5a,
	0x49, 0x4d, 0x57, 0x49, 0x4b, 0x49, 0x10, 0x37, 0x32, 0x47, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x12, 0x16, 0x2e, 0x70, 0x61, 0x6e, 0x64, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x6e, 0x64, 0x6f,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x6e, 0x64, 0x6f, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x61, 0x6e, 0x64, 0x6f, 0x63, 0x2d, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x0a, 0x50, 0x61,
	0x6e, 0x64, 0x6f, 0x63, 0x2e, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_converter_proto_rawDescOnce sync.Once
	file_converter_proto_rawDescData = file_converter_proto_rawDesc
)

func file_converter_proto_rawDescGZIP() []byte {
	file_converter_proto_rawDescOnce.Do(func() {
		file_converter_proto_rawDescData = protoimpl.X.CompressGZIP(file_converter_proto_rawDescData)
	})
	return file_converter_proto_rawDescData
}

var file_converter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_converter_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_converter_proto_goTypes = []interface{}{
	(Format)(0),             // 0: pandoc.Format
	(*ConvertRequest)(nil),  // 1: pandoc.ConvertRequest
	(*ConvertResponse)(nil), // 2: pandoc.ConvertResponse
}
var file_converter_proto_depIdxs = []int32{
	0, // 0: pandoc.ConvertRequest.from_format:type_name -> pandoc.Format
	0, // 1: pandoc.ConvertRequest.to_format:type_name -> pandoc.Format
	0, // 2: pandoc.ConvertResponse.to_format:type_name -> pandoc.Format
	1, // 3: pandoc.Converter.Convert:input_type -> pandoc.ConvertRequest
	2, // 4: pandoc.Converter.Convert:output_type -> pandoc.ConvertResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_converter_proto_init() }
func file_converter_proto_init() {
	if File_converter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_converter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_converter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_converter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_converter_proto_goTypes,
		DependencyIndexes: file_converter_proto_depIdxs,
		EnumInfos:         file_converter_proto_enumTypes,
		MessageInfos:      file_converter_proto_msgTypes,
	}.Build()
	File_converter_proto = out.File
	file_converter_proto_rawDesc = nil
	file_converter_proto_goTypes = nil
	file_converter_proto_depIdxs = nil
}
